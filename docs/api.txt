#include <mutex>
#include <string>
#include <vector>
#include <unordered_map>

typedef  Lock;
typedef std::unique_lock< Lock >  WriteLock; // C++ 11
typedef std::shared_lock< Lock >  ReadLock;  // C++ 14

class node {
public:
	node(node_ctxt& ctxt, size_t parentId, size_t id, size_t typeId, size_t nameStringId);

	// member state
	mutable node_ctxt& m_ctxt;
	const size_t m_parentId;
	const size_t m_id;
	const size_t m_typeId;
	const size_t m_nameStringId;

	// create new nodes under this
	add_nodes(const std::vector<std::wstring>& newNames,
		      std::vector<node>& outputNodes);

	// tree operations
	std::wstring full_path() const;
	void dir(std::vector<node>& children);
	void move(size_t newParentId);
	void copy(size_t newParentId, const size_t newNameId);
	void ren(const size_t newNameId);
	del();

	// linking
	void link(size_t linkType, size_t toNodeId);
	void unlink(size_t linkType, size_t toNodeId);
	// nodeid -> linktype
	void in_links(std::unordered_map<size_t, size_t>& links); 
	void out_links(std::unordered_map<size_t, size_t>& links);

	// properties: name string ID => value string ID
	void set_props(const std::unordered_map<size_t, size_t>& props); 
	void get_props(std::unordered_map<size_t, size_t>& props);
};

class node_criteria {
public:
	node_criteria(const std::wstring& str);
	~node_criteria();
	
	const size_t m_name;
	const std::wstring m_parameter;
	node_critera* m_inner;
	
	std::wstring sql() const;
};

class node_query {
public:
	std::vector<node> query_nodes
	(
		size_t parent_node_id,
		const std::vector<node_criteria>& criteria, 
		const std::unordered_map<std::wstring, std::wstring>& params
	);
};
